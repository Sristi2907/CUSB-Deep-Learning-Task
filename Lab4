import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler

def sigmoid(x):  #activation function
    return 1/(1 + np.exp(-x))

def sigmoid_grad(x):   #derivative of activation function
    s = sigmoid(x)
    return s * (1-s)
    
def softmax(x):
    x_shift = x -np.max(x, axis = 1, keepdims = True)
    exp_x = np.exp(x_shift)
    return exp_x / np.sum(exp_x, axis=1, keepdims=True

iris = datasets.load_iris()
X = iris.data                       
y = iris.target.reshape(-1, 1)

scaler = StandardScaler()
X = scaler.fit_transform(X)

enc = OneHotEncoder(sparse_output=False)
y_encoded = enc.fit_transform(y)    # one-hot labels

X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42
)

class NeuralNetwork:
    def __init__(self, layer_sizes):
        self.weights = [np.random.randn(i, j) * 0.1 for i, j in zip(layer_sizes[:-1], layer_sizes[1:])]
        self.biases = [np.zeros((1, j)) for j in layer_sizes[1:]]

    def feedforward(self, X):
        self.activations = [X]
        self.zs = []
        # Hidden layers
        for i in range(len(self.weights) - 1):
            z = self.activations[-1] @ self.weights[i] + self.biases[i]
            self.zs.append(z)
            self.activations.append(sigmoid(z))
        # Output layer
        z = self.activations[-1] @ self.weights[-1] + self.biases[-1]
        self.zs.append(z)
        self.activations.append(softmax(z))
        return self.activations[-1]

    def backward(self, X, y, lr=0.01):
        n_layers = len(self.weights)
        deltas = [None] * n_layers
        # Output error
        deltas[-1] = self.activations[-1] - y
        # Hidden layer errors
        for i in reversed(range(n_layers - 1)):
            deltas[i] = (deltas[i+1] @ self.weights[i+1].T) * sigmoid_prime(self.zs[i])
        # Update weights and biases
        for i in range(n_layers):
            self.weights[i] -= lr * (self.activations[i].T @ deltas[i]) / X.shape[0]
            self.biases[i] -= lr * np.mean(deltas[i], axis=0, keepdims=True)

    def train(self, X, y, epochs=500, lr=0.1):
        for epoch in range(epochs):
            self.feedforward(X)
            self.backward(X, y, lr)
            if epoch % 100 == 0:
                loss = -np.mean(np.sum(y * np.log(self.activations[-1] + 1e-8), axis=1))
                print(f"Epoch {epoch}, Loss: {loss:.4f}")

    def predict(self, X):
        probs = self.feedforward(X)
        return np.argmax(probs, axis=1)

#  Build and train network 
layer_sizes = [X_train.shape[1], 10, 7, y_train.shape[1]]  # 4 -> 10 -> 7 -> 3
nn = NeuralNetwork(layer_sizes)
nn.train(X_train, y_train, epochs=500, lr=0.1)

#  Test 
y_pred = nn.predict(X_test)
y_true = np.argmax(y_test, axis=1)
accuracy = np.mean(y_pred == y_true)
print(f"Test accuracy: {accuracy:.4f}")

