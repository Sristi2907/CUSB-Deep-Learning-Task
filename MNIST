import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

(x_train, y_train), (x_test, y_test) = mnist.load_data()

print("Training data shape:", x_train.shape)
print("Training labels shape:", y_train.shape)
print("Test data shape:", x_test.shape)
print("Test labels shape:", y_test.shape)


x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

plt.figure(figsize=(10, 2))
for i in range(5):
    plt.subplot(1, 5, i+1)
    plt.imshow(x_train[i], cmap="gray")
    plt.title("Label: " + str(y_train[i]))
    plt.axis("off")
plt.show()




y_train_onehot = to_categorical(y_train, 10)
y_test_onehot = to_categorical(y_test, 10)


model = Sequential()


model.add(Flatten(input_shape=(28, 28)))


model.add(Dense(128, activation='relu'))   # 1st hidden layer
model.add(Dense(64, activation='relu'))    # 2nd hidden layer


model.add(Dense(10, activation='softmax'))


model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])


history = model.fit(x_train, y_train_onehot,
                    validation_split=0.1,  
                    epochs=10,
                    batch_size=128,
                    verbose=2)


test_loss, test_acc = model.evaluate(x_test, y_test_onehot, verbose=0)
print("\nTest Accuracy:", test_acc)
print("Test Loss:", test_loss)
